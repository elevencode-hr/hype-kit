/// A mixin to spit out our width classes. Pass in the columns we want the widths
/// to have, and an optional suffix for responsive widths.
///
/// @example scss
///   .element {
///     @include widths(3 4, -sm);
///   }

@mixin widths($widths-columns, $widths-breakpoint: null) {
  // Loop through the number of columns for each denominator of our fractions.
  @each $widths-denominator in $widths-columns {
    // Begin creating a numberator for our fraction up until we hit the
    // denominator.
    @for $widths-numerator from 1 through $widths-denominator {
      // Build a class in the format `.u-3/4` or `.u-3-of-4`.
      .u-#{$widths-numerator}\/#{$widths-denominator}#{$widths-breakpoint} {
        width: ($widths-numerator / $widths-denominator) * 100% !important;
      }
    }
  }
}

// Widths example
// A series of width helper classes that you can use to size things like grid
// systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
// word format (e.g. `.u-2-of-3`).
//
// @example html
//   <div class="u-5/5 u-2/15@md">

@include widths(1 2 3 4 5);

@include oGridRespondTo($from: XS) {
  @include widths(1 2 3 4 5, \@xs);
}

@include oGridRespondTo($from: S) {
  @include widths(1 2 3 4 5, \@sm);
}

@include oGridRespondTo($from: M) {
  @include widths(1 2 3 4 5, \@md);
}

@include oGridRespondTo($from: L) {
  @include widths(1 2 3 4 5, \@lg);
}

@include oGridRespondTo($from: XL) {
  @include widths(1 2 3 4 5, \@xl);
}
