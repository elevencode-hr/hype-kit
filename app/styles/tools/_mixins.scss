////
/// Global mixins available to the entire project. Define file-specific
/// mixins inside the file to which they relate.
///
/// @group tools
////




/// Generate `:hover` and `:focus` styles in one go.
///
/// @example
///  .simple-usage {
///   @include hocus();
///  }

@mixin hocus() {
    &:hover,
    &:focus {
        @content;
    }
}

/// Generate circular border radius
///
/// @example
///  .simple-circle {
///   @include circular();
///  }

@mixin circular {
    border-radius: 1000px; // Android 2.3 cannot deal with '50%'
}

/// Aspect ratio function
@function aspectRatioHeight($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

/// Aspect ratio mixin
@mixin fixAspectRatio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspectRatioHeight($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

/// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

/// Clamps a block of text to a certain number of lines,
/// followed by an ellipsis in Webkit and Blink based browsers
///
/// @group mixins
/// @link http://dropshado.ws/post/1015351370/webkit-line-clamp

@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines;
    }
}

/// Ellipsis
///
/// @group mixins

@mixin ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/// Absolute center
///
/// this is a pattern for horizontally and vertically centering an element within its container
/// the negative values expand the box in which the element is centered, which is required when the element
/// is bigger than its container (can be increased if required)
///
/// @group mixins

@mixin absolute-center {

    position: absolute;
    top: -20px;
    bottom: -20px;
    left: -20px;
    right: -20px;
    margin: auto;
}

// Placeholder for mixin
%absolute-center {
    @include absolute-center;
}

/// Simple truncation mixin to cut off text using an ellipsis after a certain
/// width.
///
/// @example
///   .simple-usage {
///     @include truncate();
///   }
///
///   .detailed-usage {
///     @include truncate(<value>);
///   }

@mixin truncate($width: 100%) {
  max-width: $width;
  white-space:nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
