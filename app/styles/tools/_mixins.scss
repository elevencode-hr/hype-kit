////
/// Global mixins available to the entire project. Define file-specific
/// mixins inside the file to which they relate.
///
/// @group tools
////


/// Generate `:hover` and `:focus` styles in one go.
///
/// @example
///   .simple-usage {
///     @include hocus();
///   }
///
/// @link http://www.456bereastreet.com/archive/201004/whenever_you_use_hover_also_use_focus/

@mixin hocus() {

    &:hover,
    &:focus {
        @content;
    }
}

/// Generate circular border radius
///
/// @example
///  .simple-circle {
///   @include circular();
///  }

@mixin circular {
    border-radius: 1000px; // Android 2.3 cannot deal with '50%'
}

/// Aspect ratio function
@function aspectRatioHeight($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

/// Aspect ratio mixin
@mixin fixAspectRatio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspectRatioHeight($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

// Removing elements from view and/or ATs
// ===========================================

/// Visually hide content, leaving it accessible to screenreaders and ATs.
/// link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin hide-visually() {
  /* Hiding elements visually overrides any matching property declarations */
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

/// Completely hide content both visually from the screen, and from screenreaders
/// and ATs.
@mixin hide-completely() {
  /* Hiding elements completely overrides any matching property declarations */
  display: none !important;
}


/// Clamps a block of text to a certain number of lines,
/// followed by an ellipsis in Webkit and Blink based browsers
///
/// @link http://dropshado.ws/post/1015351370/webkit-line-clamp
///
/// @example scss
///   .element {
///     @include text-clamp(<value>, <value>);
///   }

@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `â€¦` at the end of the block)
    @if $line-height {
        max-height: $line-height * $lines;
    }
}


/// Ellipsis
///
/// @example scss
///   .element {
///     @include ellipsis();
///   }

@mixin ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}


/// This is a pattern for horizontally and vertically centering an element within its container.
/// The negative values expand the box in which the element is centered, which is required when the element
/// is bigger than its container (can be increased if required).
///
/// @example scss
///   .element {
///     @include absolute-center;
///   }

@mixin absolute-center {
    position: absolute;
    top: -20px;
    bottom: -20px;
    left: -20px;
    right: -20px;
    margin: auto;
}

// Placeholder for mixin
%absolute-center {
    @include absolute-center;
}


/// Simple truncation mixin to cut off text using an ellipsis after a certain
/// width.
///
/// @example scss
///   .simple-usage {
///     @include truncate();
///   }
///
/// @example scss
///   .detailed-usage {
///     @include truncate(<value>);
///   }

@mixin truncate($width: 100%) {
  max-width: $width;
  white-space:nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


/// Focus outline
/// Generates a consistent outline shadow for use on `:focus` or `.has-focus`.

@mixin focus-styles($color: default) {
  outline: none;

  @if ($color == "default") {
    box-shadow: 0 1px 3px rgba(color(black), 0.4), 0 1px 15px 3px rgba(color(highlight), 0.75);
  }

  @elseif ($color == "invert") {
    box-shadow: 0 1px 3px rgba(color(black), 0.75), 0 1px 15px 3px rgba(color(white), 0.75);
  }

  @else {
    @warn "`#{$color}` is not a valid outline color, it must be `default` or `invert`.";
  }
}
